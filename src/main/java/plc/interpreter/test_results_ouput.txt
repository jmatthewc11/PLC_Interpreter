InterpreterTests: (21/34)
  Math: (7/9)
    *: (4/5)
      Invalid Number (Single): Failed (Unexpected java.lang.ClassCastException:java.lang.ClassCastException: java.lang.String cannot be cast to java.math.BigDecimal)
    *: (3/4)
      Invalid Number (Single): Failed (Unexpected java.lang.ClassCastException:java.lang.ClassCastException: java.lang.String cannot be cast to java.math.BigDecimal)
  Comparison: (7/17)
    true: (0/2)
      Identifier: Failed (expected true, received magnetar.plc.interpreter.Interpreter$$Lambda$6/1496220903@531d72ca)
      Term (Zero Args): Failed (Expected an EvalException to be thrown)
    or: (4/6)
      Single Argument (true): Failed (expected true, received false)
      Short Circuit: Failed (Unexpected EvalException (plc.interpreter.EvalException: The identifier INVALID is not defined.))
    <=: (3/9)
      Single Argument: Failed (expected true, received false)
      Multiple Arguments (true): Failed (expected true, received false)
      Term Argument: Failed (expected true, received false)
      String Arguments: Failed (expected true, received false)
      Equal Arguments: Failed (expected true, received false)
      Invalid Argument: Failed (Expected an EvalException to be thrown)
  Sequence: (7/8)
    range: (7/8)
      Too Many Arguments: Failed (Expected an EvalException to be thrown)

Compilation Warnings: 

Interpreter.java:6: warning: Operation is internal proprietary API and may be removed in a future release
import com.sun.org.apache.xpath.internal.operations.Operation;
                                                   ^
Note: Interpreter.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 warning

InterpreterTests: (45/57)
  Comparison: (16/17)
    <=: (8/9)
      Single Argument `(<= 10)`: Failed (Unexpected EvalException (Needs two arguments to compare greater than or equal to))
  State: (7/9)
    define: (2/4)
      Define Variable `(define x 10)`: Failed (Unexpected EvalException (The identifier define is not defined.))
      Define Returns VOID `(define x 10)`: Failed (Unexpected EvalException (The identifier define is not defined.))
  Control Flow: (5/14)
    do: (2/7)
      One Argument (Number) `(do 10)`: Failed (Unexpected EvalException (The identifier 10 is not defined.))
      One Argument (Term) `(do (double 10))`: Failed (Unexpected EvalException (The identifier (double 10) is not defined.))
      Multiple Arguments `(do 10 (double 10) \"return\")`: Failed (Unexpected EvalException (The identifier \"return\" is not defined.))
      Do Scope (Define Shadowing) `(do (define x 10))`: Failed (Unexpected EvalException (The identifier define is not defined.))
      Do Scope (Set Parent) `(do (set! y 10))`: Failed (Unexpected EvalException (The identifier (set! y 10) is not defined.))
    for: (3/7)
      For Iteration (Requires set! & +) `(for (i strings) (set! count (+ count 1)))`: Failed (Unexpected EvalException (for requires three arguments))
      For Variable (Requires set! & +) `(for (i numbers) (set! count (+ count i)))`: Failed (Unexpected EvalException (for requires three arguments))
      For Return `(for (i numbers) (print ))`: Failed (Unexpected EvalException (for requires three arguments))
      For Scope (Variable) `(for (i numbers) (print ))`: Failed (Unexpected EvalException (for requires three arguments))

Compilation Warnings:

Interpreter.java:6: warning: Operation is internal proprietary API and may be removed in a future release
import com.sun.org.apache.xpath.internal.operations.Operation;
                                                   ^
Note: Interpreter.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 warning

Lexer Tests:
FizzBuzz `#lang racket␊␊(define (fizzbuzz n)␊  (for ([i (in-range 1 (+ n 1))])␊    (displayln␊      (match (gcd i 15)␊        [15 \"FizzBuzz\"]␊        [3 \"Fizz\"]␊        [5 \"Buzz\"]␊        [_ i])))␊␊(fizzbuzz 100)`:
Failed (expected
[OPERATOR=`#`@0, IDENTIFIER=`lang`@1, IDENTIFIER=`racket`@6, OPERATOR=`(`@14, IDENTIFIER=`define`@15, OPERATOR=`(`@22, IDENTIFIER=`fizzbuzz`@23, IDENTIFIER=`n`@32, OPERATOR=`)`@33, OPERATOR=`(`@37, IDENTIFIER=`for`@38, OPERATOR=`(`@42, OPERATOR=`[`@43, IDENTIFIER=`i`@44, OPERATOR=`(`@46, IDENTIFIER=`in-range`@47, NUMBER=`1`@56, OPERATOR=`(`@58, IDENTIFIER=`+`@59, IDENTIFIER=`n`@61, NUMBER=`1`@63, OPERATOR=`)`@64, OPERATOR=`)`@65, OPERATOR=`]`@66, OPERATOR=`)`@67, OPERATOR=`(`@73, IDENTIFIER=`displayln`@74, OPERATOR=`(`@90, IDENTIFIER=`match`@91, OPERATOR=`(`@97, IDENTIFIER=`gcd`@98, IDENTIFIER=`i`@102, NUMBER=`15`@104, OPERATOR=`)`@106, OPERATOR=`[`@116, NUMBER=`15`@117, STRING=`\"FizzBuzz\"`@120, OPERATOR=`]`@130, OPERATOR=`[`@140, NUMBER=`3`@141, STRING=`\"Fizz\"`@143, OPERATOR=`]`@149, OPERATOR=`[`@159, NUMBER=`5`@160, STRING=`\"Buzz\"`@162, OPERATOR=`]`@168, OPERATOR=`[`@178, IDENTIFIER=`_`@179, IDENTIFIER=`i`@181, OPERATOR=`]`@182, OPERATOR=`)`@183, OPERATOR=`)`@184, OPERATOR=`)`@185, OPERATOR=`(`@188, IDENTIFIER=`fizzbuzz`@189, NUMBER=`100`@198, OPERATOR=`)`@201], received
[OPERATOR=`#`@0, IDENTIFIER=`lang`@1, IDENTIFIER=`racket`@6, OPERATOR=`(`@14, IDENTIFIER=`define`@15, OPERATOR=`(`@22, IDENTIFIER=`fizzbuzz`@23, IDENTIFIER=`n`@32, OPERATOR=`)`@33, OPERATOR=`(`@37, IDENTIFIER=`for`@38, OPERATOR=`(`@42, OPERATOR=`[`@43, IDENTIFIER=`i`@44, OPERATOR=`(`@46, IDENTIFIER=`in-range`@47, NUMBER=`1`@56, OPERATOR=`(`@58, IDENTIFIER=`+`@59, IDENTIFIER=`n`@61, NUMBER=`1`@63, OPERATOR=`)`@64, OPERATOR=`)`@65, OPERATOR=`]`@66, OPERATOR=`)`@67, OPERATOR=`(`@73, IDENTIFIER=`displayln`@74, OPERATOR=`(`@90, IDENTIFIER=`match`@91, OPERATOR=`(`@97, IDENTIFIER=`gcd`@98, IDENTIFIER=`i`@102, NUMBER=`15`@104, OPERATOR=`)`@106, OPERATOR=`[`@116, NUMBER=`15`@117, STRING=`\"FizzBuzz\"`@120, OPERATOR=`]`@130, OPERATOR=`[`@140, NUMBER=`3`@141, STRING=`\"Fizz\"`@143, OPERATOR=`]`@149, OPERATOR=`[`@159, NUMBER=`5`@160, STRING=`\"Buzz\"`@162, OPERATOR=`]`@168, OPERATOR=`[`@178, OPERATOR=`_`@179, IDENTIFIER=`i`@181, OPERATOR=`]`@182, OPERATOR=`)`@183, OPERATOR=`)`@184, OPERATOR=`)`@185, OPERATOR=`(`@188, IDENTIFIER=`fizzbuzz`@189, NUMBER=`100`@198, OPERATOR=`)`@201])

Parser Tests:
  Term: (17/25)
    Mixed Separators 1 `(print x]`: Failed (Expected a ParseException to be thrown)
    Mixed Separators 2 `[print (f x))`: Failed (Expected a ParseException to be thrown)
  String: (12/15)
    All Escapes `(print \"\\b\\n\\r\\t\\\'\\\"\\\\\")`: Failed (expected (source (print \"␈␊␍␉\'\"\\\")), received (source (print \"\\b␊␍␉\\\'\\\"\\\\\")))
  FizzBuzz `(lang racket)␊␊(define (fizzbuzz n)␊  (for [i (in-range 1 (+ n 1))]␊    (displayln␊      (match (gcd i 15)␊        [case 15 \"FizzBuzz\"]␊


       [case 3 \"Fizz\"]␊        [case 5 \"Buzz\"]␊        [else i]))))␊␊(fizzbuzz 100)`: Failed (expected (source (lang racket) (define (fizzbuzz n) (for (i (in-range 1 (+ n 1)))
       (displayln (match (gcd i 15) (case 15 \"FizzBuzz\") (case 3 \"Fizz\") (case 5 \"Buzz\") (else i))))) (fizzbuzz 100)), received (source (lang racket)
       (define (fizzbuzz n) (for (i (in-range 1 (+ n 1) (displayln (match (gcd i 15) (case 15 \"FizzBuzz\") (case 3 \"Fizz\") (case 5 \"Buzz\") (else i)
       (fizzbuzz 100)))))))))

FINAL EVAL:
RegexTests: (73/100)
  Email: (4/19)
    Submitted: Failed (Missing RegexTests.java)
    Coverage: Failed (Missing RegexTests.java)
  File Names: (13/15)
    Submitted: Failed (Missing RegexTests.java)
  Even Strings: (13/15)
    Submitted: Failed (Missing RegexTests.java)
  Integer List: (13/15)
    Submitted: Failed (Missing RegexTests.java)
  Identifier: (10/12)
    Submitted: Failed (Missing RegexTests.java)
  Number: (10/12)
    Submitted Tests: Failed (Missing RegexTests.java)
  String: (10/12)
    Submitted: Failed (Missing RegexTests.java)

LexerTests: (100/100)

ParserTests: (93/100)
  Source: (13/15)
    Mixed `x 10 \"string\" (print x)`: Failed (Unexpected ParseException (plc.interpreter.ParseException: Illegal token encountered when trying to parse))
  FizzBuzz `(lang racket)␊␊(define (fizzbuzz n)␊  (for [i (in-range 1 (+ n 1))]␊    (displayln␊      (match (gcd i 15)␊        [case 15 \"FizzBuzz\"]␊        [case 3 \"Fizz\"]␊        [case 5 \"Buzz\"]␊        [else i]))))␊␊(fizzbuzz 100)`: Failed
  (expected (source (lang racket) (define (fizzbuzz n) (for (i (in-range 1 (+ n 1))) (displayln (match (gcd i 15) (case 15 \"FizzBuzz\") (case 3 \"Fizz\") (case 5 \"Buzz\") (else i))))) (fizzbuzz 100)),
  received  (source (lang racket) (define (fizzbuzz n) (for (i (in-range 1 (+ n 1) (displayln (match (gcd i 15) (case 15 \"FizzBuzz\") (case 3 \"Fizz\") (case 5 \"Buzz\") (else i) (fizzbuzz 100)))))))))